{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"E:\\\\WebFrontEnd\\\\react-next\\\\pages\\\\active-className\\\\components\\\\Link.js\";\nimport React from \"react\";\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nimport { Children } from 'react';\n\nvar ActiveLink = function ActiveLink(_ref) {\n  var children = _ref.children,\n      router = _ref.router,\n      props = _objectWithoutProperties(_ref, [\"children\", \"router\"]);\n\n  // 验证children是否只有一个子节点，有则返回它，否则抛出错误\n  var child = Children.only(children);\n  var className = child.props.className || null;\n\n  if (router.pathname === props.href && props.activeClassName) {\n    className = \"\".concat(className !== null ? className : '', \" \").concat(props.activeClassName).trim();\n  }\n\n  delete props.activeClassName; // 以 element 元素为样板克隆并返回新的 React 元素。返回元素的 props 是将新的 props 与原始元素的 props 浅层合并后的结果\n\n  return React.createElement(Link, _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.cloneElement(child, {\n    className: className\n  }));\n}; // 注入router参数\n\n\nexport default withRouter(ActiveLink);","map":{"version":3,"sources":["E:\\WebFrontEnd\\react-next\\pages\\active-className\\components\\Link.js"],"names":["withRouter","Link","Children","ActiveLink","children","router","props","child","only","className","pathname","href","activeClassName","trim","React","cloneElement"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAkC;AAAA,MAAhCC,QAAgC,QAAhCA,QAAgC;AAAA,MAAtBC,MAAsB,QAAtBA,MAAsB;AAAA,MAAXC,KAAW;;AACjD;AACA,MAAMC,KAAK,GAAGL,QAAQ,CAACM,IAAT,CAAcJ,QAAd,CAAd;AACA,MAAIK,SAAS,GAAGF,KAAK,CAACD,KAAN,CAAYG,SAAZ,IAAyB,IAAzC;;AAEA,MAAGJ,MAAM,CAACK,QAAP,KAAoBJ,KAAK,CAACK,IAA1B,IAAkCL,KAAK,CAACM,eAA3C,EAA4D;AACxDH,IAAAA,SAAS,GAAG,UAAGA,SAAS,KAAK,IAAd,GAAqBA,SAArB,GAAiC,EAApC,cAA0CH,KAAK,CAACM,eAAhD,EAAkEC,IAAlE,EAAZ;AACH;;AAED,SAAOP,KAAK,CAACM,eAAb,CATiD,CAWjD;;AACA,SAAO,oBAAC,IAAD,eAAUN,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmBQ,KAAK,CAACC,YAAN,CAAmBR,KAAnB,EAA0B;AAAEE,IAAAA,SAAS,EAATA;AAAF,GAA1B,CAAnB,CAAP;AACH,CAbD,C,CAeA;;;AACA,eAAeT,UAAU,CAACG,UAAD,CAAzB","sourcesContent":["import { withRouter } from 'next/router';\r\nimport Link from 'next/link';\r\nimport { Children } from 'react';\r\nconst ActiveLink = ({children, router, ...props}) => {\r\n    // 验证children是否只有一个子节点，有则返回它，否则抛出错误\r\n    const child = Children.only(children);\r\n    let className = child.props.className || null;\r\n\r\n    if(router.pathname === props.href && props.activeClassName) {\r\n        className = `${className !== null ? className : ''} ${props.activeClassName}`.trim();\r\n    }\r\n\r\n    delete props.activeClassName;\r\n\r\n    // 以 element 元素为样板克隆并返回新的 React 元素。返回元素的 props 是将新的 props 与原始元素的 props 浅层合并后的结果\r\n    return <Link {...props}>{ React.cloneElement(child, { className }) }</Link>\r\n}\r\n\r\n// 注入router参数\r\nexport default withRouter(ActiveLink);"]},"metadata":{},"sourceType":"module"}