{"version":3,"file":"static/webpack/static\\development\\pages\\active-className\\about.js.c9a71c725afaf8615086.hot-update.js","sources":["webpack:///./pages/active-className/components/Link.js"],"sourcesContent":["import { withRouter } from 'next/router';\r\nimport Link from 'next/link';\r\nimport { Children } from 'react';\r\nconst ActiveLink = ({children, router, ...props}) => {\r\n    // 验证children是否只有一个子节点，有则返回它，否则抛出错误\r\n    const child = Children.only(children);\r\n    let className = child.props.className || null;\r\n\r\n    if(router.pathname === props.href && props.activeClassName) {\r\n        className = `${className !== null ? className : ''} ${props.activeClassName}`.trim();\r\n    }\r\n\r\n    delete props.activeClassName;\r\n\r\n    // 以 element 元素为样板克隆并返回新的 React 元素。返回元素的 props 是将新的 props 与原始元素的 props 浅层合并后的结果\r\n    return <Link {...props}>{ React.cloneElement(child, { className }) }</Link>\r\n}\r\n\r\n// 注入router参数\r\nexport default withRouter(ActiveLink);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}